#!/usr/bin/perl
# public domain
# benchmark sampler by dormando.

use warnings;
use strict;
use IO::Socket::INET;
use Time::HiRes;

my $host        = shift @ARGV;
my $SAMPLE_TIME = shift @ARGV || 2;
my @TO_SAMPLE   = @ARGV;
unless (@TO_SAMPLE) {
    @TO_SAMPLE = ('cmd_get');
}
my $longest = 0;
for (@TO_SAMPLE) {
    $longest = length($_) if length($_) > $longest;
}
$longest++;

my $s = connect_to($host);
die $@ unless $s;

my $one      = mc_info($s);
my $one_time = Time::HiRes::time;

sleep $SAMPLE_TIME;

my $two      = mc_info($s);
my $two_time = Time::HiRes::time;

my $elapsed = $two_time - $one_time;

for my $stat (@TO_SAMPLE) {
    my $per_sec = ($two->{$stat} - $one->{$stat}) / $elapsed;
    printf "%-${longest}s avg/s (%2s/s sample): %s\n", $stat,
        $SAMPLE_TIME, $per_sec;
}

sub mc_info {
    my $s = shift;
    print $s "stats\r\n";
    my %stats = ();
    while (my $line = <$s>) {
        last if $line =~ m/^END/;
        if ($line =~ m/^STAT (\S+) (\d+)/) {
            $stats{$1} = $2;
        }
    }
    return \%stats;
}

sub connect_to {
    return IO::Socket::INET->new(PeerAddr => $_[0], Timeout => 3);
}
